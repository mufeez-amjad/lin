// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package linear

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// __getAssignedIssuesInput is used internally by genqlient
type __getAssignedIssuesInput struct {
	Cursor string `json:"cursor,omitempty"`
}

// GetCursor returns __getAssignedIssuesInput.Cursor, and is useful for accessing the field via an interface.
func (v *__getAssignedIssuesInput) GetCursor() string { return v.Cursor }

// getAssignedIssuesResponse is returned by getAssignedIssues on success.
type getAssignedIssuesResponse struct {
	// The currently authenticated user.
	Viewer getAssignedIssuesViewerUser `json:"viewer"`
}

// GetViewer returns getAssignedIssuesResponse.Viewer, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesResponse) GetViewer() getAssignedIssuesViewerUser { return v.Viewer }

// getAssignedIssuesViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type getAssignedIssuesViewerUser struct {
	// Issues assigned to the user.
	AssignedIssues getAssignedIssuesViewerUserAssignedIssuesIssueConnection `json:"assignedIssues"`
}

// GetAssignedIssues returns getAssignedIssuesViewerUser.AssignedIssues, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUser) GetAssignedIssues() getAssignedIssuesViewerUserAssignedIssuesIssueConnection {
	return v.AssignedIssues
}

// getAssignedIssuesViewerUserAssignedIssuesIssueConnection includes the requested fields of the GraphQL type IssueConnection.
type getAssignedIssuesViewerUserAssignedIssuesIssueConnection struct {
	PageInfo getAssignedIssuesViewerUserAssignedIssuesIssueConnectionPageInfo     `json:"pageInfo"`
	Nodes    []getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue `json:"nodes"`
}

// GetPageInfo returns getAssignedIssuesViewerUserAssignedIssuesIssueConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnection) GetPageInfo() getAssignedIssuesViewerUserAssignedIssuesIssueConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns getAssignedIssuesViewerUserAssignedIssuesIssueConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnection) GetNodes() []getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue {
	return v.Nodes
}

// getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An issue.
type getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// Issue's human readable identifier (e.g. ENG-123).
	Identifier string `json:"identifier"`
	// The issue's title.
	Title string `json:"title"`
	// The issue's description in markdown format.
	Description string `json:"description"`
	// Suggested branch name for the issue.
	BranchName string `json:"branchName"`
	// Issue URL.
	Url string `json:"url"`
	// Attachments associated with the issue.
	Attachments getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnection `json:"attachments"`
}

// GetId returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.Id, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetId() string {
	return v.Id
}

// GetIdentifier returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.Identifier, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetIdentifier() string {
	return v.Identifier
}

// GetTitle returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.Title, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetTitle() string {
	return v.Title
}

// GetDescription returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.Description, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetDescription() string {
	return v.Description
}

// GetBranchName returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.BranchName, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetBranchName() string {
	return v.BranchName
}

// GetUrl returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.Url, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetUrl() string {
	return v.Url
}

// GetAttachments returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.Attachments, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetAttachments() getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnection {
	return v.Attachments
}

// getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnection includes the requested fields of the GraphQL type AttachmentConnection.
type getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnection struct {
	Nodes []getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment `json:"nodes"`
}

// GetNodes returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnection) GetNodes() []getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment {
	return v.Nodes
}

// getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment includes the requested fields of the GraphQL type Attachment.
// The GraphQL type's documentation follows.
//
// Issue attachment (e.g. support ticket, pull request).
type getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment struct {
	// Content for the title line in the Linear attachment widget.
	Title string `json:"title"`
	// Content for the subtitle line in the Linear attachment widget.
	Subtitle string `json:"subtitle"`
	// Custom metadata related to the attachment.
	Metadata map[string]string `json:"metadata"`
	// Location of the attachment which is also used as an identifier.
	Url string `json:"url"`
}

// GetTitle returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment.Title, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment) GetTitle() string {
	return v.Title
}

// GetSubtitle returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment.Subtitle, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment) GetSubtitle() string {
	return v.Subtitle
}

// GetMetadata returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment.Metadata, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment) GetMetadata() map[string]string {
	return v.Metadata
}

// GetUrl returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment.Url, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment) GetUrl() string {
	return v.Url
}

// getAssignedIssuesViewerUserAssignedIssuesIssueConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type getAssignedIssuesViewerUserAssignedIssuesIssueConnectionPageInfo struct {
	// Indicates if there are more results when paginating forward.
	HasNextPage bool `json:"hasNextPage"`
	// Cursor representing the last result in the paginated results.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// The query or mutation executed by getAssignedIssues.
const getAssignedIssues_Operation = `
query getAssignedIssues ($cursor: String) {
	viewer {
		assignedIssues(after: $cursor, orderBy: updatedAt, filter: {state:{type:{in:["started","backlog"]}}}) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				id
				identifier
				title
				description
				branchName
				url
				attachments(filter: {sourceType:{in:["github","gitlab"]}}) {
					nodes {
						title
						subtitle
						metadata
						url
					}
				}
			}
		}
	}
}
`

func getAssignedIssues(
	ctx context.Context,
	client graphql.Client,
	cursor string,
) (*getAssignedIssuesResponse, error) {
	req := &graphql.Request{
		OpName: "getAssignedIssues",
		Query:  getAssignedIssues_Operation,
		Variables: &__getAssignedIssuesInput{
			Cursor: cursor,
		},
	}
	var err error

	var data getAssignedIssuesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
