// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package linear

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// __getAssignedIssuesInput is used internally by genqlient
type __getAssignedIssuesInput struct {
	Cursor string `json:"cursor,omitempty"`
}

// GetCursor returns __getAssignedIssuesInput.Cursor, and is useful for accessing the field via an interface.
func (v *__getAssignedIssuesInput) GetCursor() string { return v.Cursor }

// __getOrganizationInput is used internally by genqlient
type __getOrganizationInput struct {
	Cursor string `json:"cursor,omitempty"`
}

// GetCursor returns __getOrganizationInput.Cursor, and is useful for accessing the field via an interface.
func (v *__getOrganizationInput) GetCursor() string { return v.Cursor }

// __teamStatesInput is used internally by genqlient
type __teamStatesInput struct {
	TeamId string `json:"teamId"`
	Cursor string `json:"cursor,omitempty"`
}

// GetTeamId returns __teamStatesInput.TeamId, and is useful for accessing the field via an interface.
func (v *__teamStatesInput) GetTeamId() string { return v.TeamId }

// GetCursor returns __teamStatesInput.Cursor, and is useful for accessing the field via an interface.
func (v *__teamStatesInput) GetCursor() string { return v.Cursor }

// getAssignedIssuesResponse is returned by getAssignedIssues on success.
type getAssignedIssuesResponse struct {
	// The currently authenticated user.
	Viewer getAssignedIssuesViewerUser `json:"viewer"`
}

// GetViewer returns getAssignedIssuesResponse.Viewer, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesResponse) GetViewer() getAssignedIssuesViewerUser { return v.Viewer }

// getAssignedIssuesViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type getAssignedIssuesViewerUser struct {
	// Issues assigned to the user.
	AssignedIssues getAssignedIssuesViewerUserAssignedIssuesIssueConnection `json:"assignedIssues"`
}

// GetAssignedIssues returns getAssignedIssuesViewerUser.AssignedIssues, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUser) GetAssignedIssues() getAssignedIssuesViewerUserAssignedIssuesIssueConnection {
	return v.AssignedIssues
}

// getAssignedIssuesViewerUserAssignedIssuesIssueConnection includes the requested fields of the GraphQL type IssueConnection.
type getAssignedIssuesViewerUserAssignedIssuesIssueConnection struct {
	PageInfo getAssignedIssuesViewerUserAssignedIssuesIssueConnectionPageInfo     `json:"pageInfo"`
	Nodes    []getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue `json:"nodes"`
}

// GetPageInfo returns getAssignedIssuesViewerUserAssignedIssuesIssueConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnection) GetPageInfo() getAssignedIssuesViewerUserAssignedIssuesIssueConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns getAssignedIssuesViewerUserAssignedIssuesIssueConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnection) GetNodes() []getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue {
	return v.Nodes
}

// getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An issue.
type getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// Issue's human readable identifier (e.g. ENG-123).
	Identifier string `json:"identifier"`
	// The issue's title.
	Title string `json:"title"`
	// The issue's description in markdown format.
	Description string `json:"description"`
	// Suggested branch name for the issue.
	BranchName string `json:"branchName"`
	// Issue URL.
	Url string `json:"url"`
	// The workflow state that the issue is associated with.
	State getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueStateWorkflowState `json:"state"`
	// Attachments associated with the issue.
	Attachments getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnection `json:"attachments"`
}

// GetId returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.Id, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetId() string {
	return v.Id
}

// GetIdentifier returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.Identifier, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetIdentifier() string {
	return v.Identifier
}

// GetTitle returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.Title, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetTitle() string {
	return v.Title
}

// GetDescription returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.Description, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetDescription() string {
	return v.Description
}

// GetBranchName returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.BranchName, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetBranchName() string {
	return v.BranchName
}

// GetUrl returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.Url, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetUrl() string {
	return v.Url
}

// GetState returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.State, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetState() getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueStateWorkflowState {
	return v.State
}

// GetAttachments returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.Attachments, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetAttachments() getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnection {
	return v.Attachments
}

// getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnection includes the requested fields of the GraphQL type AttachmentConnection.
type getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnection struct {
	Nodes []getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment `json:"nodes"`
}

// GetNodes returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnection) GetNodes() []getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment {
	return v.Nodes
}

// getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment includes the requested fields of the GraphQL type Attachment.
// The GraphQL type's documentation follows.
//
// Issue attachment (e.g. support ticket, pull request).
type getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment struct {
	// Content for the title line in the Linear attachment widget.
	Title string `json:"title"`
	// Content for the subtitle line in the Linear attachment widget.
	Subtitle string `json:"subtitle"`
	// Location of the attachment which is also used as an identifier.
	Url string `json:"url"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetTitle returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment.Title, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment) GetTitle() string {
	return v.Title
}

// GetSubtitle returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment.Subtitle, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment) GetSubtitle() string {
	return v.Subtitle
}

// GetUrl returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment.Url, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment) GetUrl() string {
	return v.Url
}

// GetUpdatedAt returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAttachmentsAttachmentConnectionNodesAttachment) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueStateWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueStateWorkflowState struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The state's name.
	Name string `json:"name"`
	// The state's UI color as a HEX string.
	Color string `json:"color"`
}

// GetId returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueStateWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueStateWorkflowState) GetId() string {
	return v.Id
}

// GetName returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueStateWorkflowState.Name, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueStateWorkflowState) GetName() string {
	return v.Name
}

// GetColor returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueStateWorkflowState.Color, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueStateWorkflowState) GetColor() string {
	return v.Color
}

// getAssignedIssuesViewerUserAssignedIssuesIssueConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type getAssignedIssuesViewerUserAssignedIssuesIssueConnectionPageInfo struct {
	// Indicates if there are more results when paginating forward.
	HasNextPage bool `json:"hasNextPage"`
	// Cursor representing the last result in the paginated results.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns getAssignedIssuesViewerUserAssignedIssuesIssueConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getAssignedIssuesViewerUserAssignedIssuesIssueConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// getOrganizationResponse is returned by getOrganization on success.
type getOrganizationResponse struct {
	// The currently authenticated user.
	Viewer getOrganizationViewerUser `json:"viewer"`
}

// GetViewer returns getOrganizationResponse.Viewer, and is useful for accessing the field via an interface.
func (v *getOrganizationResponse) GetViewer() getOrganizationViewerUser { return v.Viewer }

// getOrganizationViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type getOrganizationViewerUser struct {
	// Organization the user belongs to.
	Organization getOrganizationViewerUserOrganization `json:"organization"`
}

// GetOrganization returns getOrganizationViewerUser.Organization, and is useful for accessing the field via an interface.
func (v *getOrganizationViewerUser) GetOrganization() getOrganizationViewerUserOrganization {
	return v.Organization
}

// getOrganizationViewerUserOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An organization. Organizations are root-level objects that contain user accounts and teams.
type getOrganizationViewerUserOrganization struct {
	// Teams associated with the organization.
	Teams getOrganizationViewerUserOrganizationTeamsTeamConnection `json:"teams"`
}

// GetTeams returns getOrganizationViewerUserOrganization.Teams, and is useful for accessing the field via an interface.
func (v *getOrganizationViewerUserOrganization) GetTeams() getOrganizationViewerUserOrganizationTeamsTeamConnection {
	return v.Teams
}

// getOrganizationViewerUserOrganizationTeamsTeamConnection includes the requested fields of the GraphQL type TeamConnection.
type getOrganizationViewerUserOrganizationTeamsTeamConnection struct {
	PageInfo getOrganizationViewerUserOrganizationTeamsTeamConnectionPageInfo    `json:"pageInfo"`
	Nodes    []getOrganizationViewerUserOrganizationTeamsTeamConnectionNodesTeam `json:"nodes"`
}

// GetPageInfo returns getOrganizationViewerUserOrganizationTeamsTeamConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getOrganizationViewerUserOrganizationTeamsTeamConnection) GetPageInfo() getOrganizationViewerUserOrganizationTeamsTeamConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns getOrganizationViewerUserOrganizationTeamsTeamConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getOrganizationViewerUserOrganizationTeamsTeamConnection) GetNodes() []getOrganizationViewerUserOrganizationTeamsTeamConnectionNodesTeam {
	return v.Nodes
}

// getOrganizationViewerUserOrganizationTeamsTeamConnectionNodesTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type getOrganizationViewerUserOrganizationTeamsTeamConnectionNodesTeam struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The team's unique key. The key is used in URLs.
	Key string `json:"key"`
	// The team's name.
	Name string `json:"name"`
	// The team's color.
	Color string `json:"color"`
}

// GetId returns getOrganizationViewerUserOrganizationTeamsTeamConnectionNodesTeam.Id, and is useful for accessing the field via an interface.
func (v *getOrganizationViewerUserOrganizationTeamsTeamConnectionNodesTeam) GetId() string {
	return v.Id
}

// GetKey returns getOrganizationViewerUserOrganizationTeamsTeamConnectionNodesTeam.Key, and is useful for accessing the field via an interface.
func (v *getOrganizationViewerUserOrganizationTeamsTeamConnectionNodesTeam) GetKey() string {
	return v.Key
}

// GetName returns getOrganizationViewerUserOrganizationTeamsTeamConnectionNodesTeam.Name, and is useful for accessing the field via an interface.
func (v *getOrganizationViewerUserOrganizationTeamsTeamConnectionNodesTeam) GetName() string {
	return v.Name
}

// GetColor returns getOrganizationViewerUserOrganizationTeamsTeamConnectionNodesTeam.Color, and is useful for accessing the field via an interface.
func (v *getOrganizationViewerUserOrganizationTeamsTeamConnectionNodesTeam) GetColor() string {
	return v.Color
}

// getOrganizationViewerUserOrganizationTeamsTeamConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type getOrganizationViewerUserOrganizationTeamsTeamConnectionPageInfo struct {
	// Cursor representing the last result in the paginated results.
	EndCursor string `json:"endCursor"`
	// Indicates if there are more results when paginating forward.
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns getOrganizationViewerUserOrganizationTeamsTeamConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getOrganizationViewerUserOrganizationTeamsTeamConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns getOrganizationViewerUserOrganizationTeamsTeamConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getOrganizationViewerUserOrganizationTeamsTeamConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// teamStatesResponse is returned by teamStates on success.
type teamStatesResponse struct {
	// One specific team.
	Team teamStatesTeam `json:"team"`
}

// GetTeam returns teamStatesResponse.Team, and is useful for accessing the field via an interface.
func (v *teamStatesResponse) GetTeam() teamStatesTeam { return v.Team }

// teamStatesTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type teamStatesTeam struct {
	// The states that define the workflow associated with the team.
	States teamStatesTeamStatesWorkflowStateConnection `json:"states"`
}

// GetStates returns teamStatesTeam.States, and is useful for accessing the field via an interface.
func (v *teamStatesTeam) GetStates() teamStatesTeamStatesWorkflowStateConnection { return v.States }

// teamStatesTeamStatesWorkflowStateConnection includes the requested fields of the GraphQL type WorkflowStateConnection.
type teamStatesTeamStatesWorkflowStateConnection struct {
	PageInfo teamStatesTeamStatesWorkflowStateConnectionPageInfo             `json:"pageInfo"`
	Nodes    []teamStatesTeamStatesWorkflowStateConnectionNodesWorkflowState `json:"nodes"`
}

// GetPageInfo returns teamStatesTeamStatesWorkflowStateConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *teamStatesTeamStatesWorkflowStateConnection) GetPageInfo() teamStatesTeamStatesWorkflowStateConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns teamStatesTeamStatesWorkflowStateConnection.Nodes, and is useful for accessing the field via an interface.
func (v *teamStatesTeamStatesWorkflowStateConnection) GetNodes() []teamStatesTeamStatesWorkflowStateConnectionNodesWorkflowState {
	return v.Nodes
}

// teamStatesTeamStatesWorkflowStateConnectionNodesWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type teamStatesTeamStatesWorkflowStateConnectionNodesWorkflowState struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The state's name.
	Name string `json:"name"`
	// The state's UI color as a HEX string.
	Color string `json:"color"`
	// The type of the state.
	Type string `json:"type"`
	// The position of the state in the team flow.
	Position float64 `json:"position"`
}

// GetId returns teamStatesTeamStatesWorkflowStateConnectionNodesWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *teamStatesTeamStatesWorkflowStateConnectionNodesWorkflowState) GetId() string { return v.Id }

// GetName returns teamStatesTeamStatesWorkflowStateConnectionNodesWorkflowState.Name, and is useful for accessing the field via an interface.
func (v *teamStatesTeamStatesWorkflowStateConnectionNodesWorkflowState) GetName() string {
	return v.Name
}

// GetColor returns teamStatesTeamStatesWorkflowStateConnectionNodesWorkflowState.Color, and is useful for accessing the field via an interface.
func (v *teamStatesTeamStatesWorkflowStateConnectionNodesWorkflowState) GetColor() string {
	return v.Color
}

// GetType returns teamStatesTeamStatesWorkflowStateConnectionNodesWorkflowState.Type, and is useful for accessing the field via an interface.
func (v *teamStatesTeamStatesWorkflowStateConnectionNodesWorkflowState) GetType() string {
	return v.Type
}

// GetPosition returns teamStatesTeamStatesWorkflowStateConnectionNodesWorkflowState.Position, and is useful for accessing the field via an interface.
func (v *teamStatesTeamStatesWorkflowStateConnectionNodesWorkflowState) GetPosition() float64 {
	return v.Position
}

// teamStatesTeamStatesWorkflowStateConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type teamStatesTeamStatesWorkflowStateConnectionPageInfo struct {
	// Cursor representing the last result in the paginated results.
	EndCursor string `json:"endCursor"`
	// Indicates if there are more results when paginating forward.
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns teamStatesTeamStatesWorkflowStateConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *teamStatesTeamStatesWorkflowStateConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns teamStatesTeamStatesWorkflowStateConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *teamStatesTeamStatesWorkflowStateConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// The query or mutation executed by getAssignedIssues.
const getAssignedIssues_Operation = `
query getAssignedIssues ($cursor: String) {
	viewer {
		assignedIssues(after: $cursor, orderBy: updatedAt, filter: {state:{type:{in:["backlog","unstarted","started"]}}}) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				id
				identifier
				title
				description
				branchName
				url
				state {
					id
					name
					color
				}
				attachments(filter: {sourceType:{in:["github","gitlab"]}}) {
					nodes {
						title
						subtitle
						url
						updatedAt
					}
				}
			}
		}
	}
}
`

func getAssignedIssues(
	ctx context.Context,
	client graphql.Client,
	cursor string,
) (*getAssignedIssuesResponse, error) {
	req := &graphql.Request{
		OpName: "getAssignedIssues",
		Query:  getAssignedIssues_Operation,
		Variables: &__getAssignedIssuesInput{
			Cursor: cursor,
		},
	}
	var err error

	var data getAssignedIssuesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getOrganization.
const getOrganization_Operation = `
query getOrganization ($cursor: String) {
	viewer {
		organization {
			teams(after: $cursor) {
				pageInfo {
					endCursor
					hasNextPage
				}
				nodes {
					id
					key
					name
					color
				}
			}
		}
	}
}
`

func getOrganization(
	ctx context.Context,
	client graphql.Client,
	cursor string,
) (*getOrganizationResponse, error) {
	req := &graphql.Request{
		OpName: "getOrganization",
		Query:  getOrganization_Operation,
		Variables: &__getOrganizationInput{
			Cursor: cursor,
		},
	}
	var err error

	var data getOrganizationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by teamStates.
const teamStates_Operation = `
query teamStates ($teamId: String!, $cursor: String) {
	team(id: $teamId) {
		states(after: $cursor) {
			pageInfo {
				endCursor
				hasNextPage
			}
			nodes {
				id
				name
				color
				type
				position
			}
		}
	}
}
`

func teamStates(
	ctx context.Context,
	client graphql.Client,
	teamId string,
	cursor string,
) (*teamStatesResponse, error) {
	req := &graphql.Request{
		OpName: "teamStates",
		Query:  teamStates_Operation,
		Variables: &__teamStatesInput{
			TeamId: teamId,
			Cursor: cursor,
		},
	}
	var err error

	var data teamStatesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
