// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: proto/linear.proto

package linear_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinearClient is the client API for Linear service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinearClient interface {
	GetIssues(ctx context.Context, in *GetIssuesRequest, opts ...grpc.CallOption) (*GetIssuesResponse, error)
}

type linearClient struct {
	cc grpc.ClientConnInterface
}

func NewLinearClient(cc grpc.ClientConnInterface) LinearClient {
	return &linearClient{cc}
}

func (c *linearClient) GetIssues(ctx context.Context, in *GetIssuesRequest, opts ...grpc.CallOption) (*GetIssuesResponse, error) {
	out := new(GetIssuesResponse)
	err := c.cc.Invoke(ctx, "/linear.Linear/GetIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinearServer is the server API for Linear service.
// All implementations must embed UnimplementedLinearServer
// for forward compatibility
type LinearServer interface {
	GetIssues(context.Context, *GetIssuesRequest) (*GetIssuesResponse, error)
	mustEmbedUnimplementedLinearServer()
}

// UnimplementedLinearServer must be embedded to have forward compatible implementations.
type UnimplementedLinearServer struct {
}

func (UnimplementedLinearServer) GetIssues(context.Context, *GetIssuesRequest) (*GetIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssues not implemented")
}
func (UnimplementedLinearServer) mustEmbedUnimplementedLinearServer() {}

// UnsafeLinearServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinearServer will
// result in compilation errors.
type UnsafeLinearServer interface {
	mustEmbedUnimplementedLinearServer()
}

func RegisterLinearServer(s grpc.ServiceRegistrar, srv LinearServer) {
	s.RegisterService(&Linear_ServiceDesc, srv)
}

func _Linear_GetIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinearServer).GetIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linear.Linear/GetIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinearServer).GetIssues(ctx, req.(*GetIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Linear_ServiceDesc is the grpc.ServiceDesc for Linear service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Linear_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "linear.Linear",
	HandlerType: (*LinearServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIssues",
			Handler:    _Linear_GetIssues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/linear.proto",
}
